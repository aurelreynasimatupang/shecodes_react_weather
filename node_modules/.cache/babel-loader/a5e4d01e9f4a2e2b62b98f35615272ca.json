{"ast":null,"code":"var _jsxFileName = \"/Users/aurelia/Documents/GitHub/shecodes_react/src/bottom/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport WeatherIcon from \"./elements/WeatherIcon\"; //import WeatherIcon from \"./elements/WeatherIcon\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Forecast(props) {\n  _s();\n\n  const [forecast, setForecast] = useState({});\n  const [ready, setReady] = useState(false);\n\n  function updateForecast(response) {\n    setForecast(response.data.daily);\n    console.log(forecast);\n    setReady(true);\n  }\n\n  let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Frid\", \"Sat\"];\n\n  function formatDay(index) {\n    return days[props.day + 1];\n  }\n\n  if (!ready) {\n    const apiKey = \"6ca05cf5f1705e072a89eb633f8633e9\";\n    let url = `https://api.openweathermap.org/data/2.5/onecall?lat=${props.coord.lat}&lon=${props.coord.lon}&appid=${apiKey}&units=metric`;\n    axios.get(url).then(updateForecast);\n    return null;\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"BottomRight\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card cardDay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" \", Math.round(forecast[0].temp.max), \" \\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"min\",\n            children: [Math.round(forecast[0].temp.min), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [formatDay(props.date), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(WeatherIcon, {\n            code: forecast[0].weather[0].icon,\n            type: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Forecast, \"Y/YfYP3Sif577Gv6TTvEtrZAvgE=\");\n\n_c = Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/aurelia/Documents/GitHub/shecodes_react/src/bottom/Forecast.js"],"names":["React","useState","axios","WeatherIcon","Forecast","props","forecast","setForecast","ready","setReady","updateForecast","response","data","daily","console","log","days","formatDay","index","day","apiKey","url","coord","lat","lon","get","then","Math","round","temp","max","min","date","weather","icon"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,wBAAxB,C,CACA;;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACtC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;;AACA,WAASS,cAAT,CAAwBC,QAAxB,EAAkC;AAChCJ,IAAAA,WAAW,CAACI,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACAG,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACD,MAAIO,IAAI,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,MAA7B,EAAqC,MAArC,EAA6C,KAA7C,CAAX;;AACA,WAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,WAAOF,IAAI,CAACX,KAAK,CAACc,GAAN,GAAY,CAAb,CAAX;AACD;;AAED,MAAI,CAACX,KAAL,EAAY;AACV,UAAMY,MAAM,GAAG,kCAAf;AACA,QAAIC,GAAG,GAAI,uDAAsDhB,KAAK,CAACiB,KAAN,CAAYC,GAAI,QAAOlB,KAAK,CAACiB,KAAN,CAAYE,GAAI,UAASJ,MAAO,eAAxH;AAEAlB,IAAAA,KAAK,CAACuB,GAAN,CAAUJ,GAAV,EAAeK,IAAf,CAAoBhB,cAApB;AAEA,WAAO,IAAP;AACD,GAPD,MAOO;AACL,wBACE;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACE;AAAA,4BAAMiB,IAAI,CAACC,KAAL,CAAWtB,QAAQ,CAAC,CAAD,CAAR,CAAYuB,IAAZ,CAAiBC,GAA5B,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAI,YAAA,SAAS,EAAC,KAAd;AAAA,uBAAqBH,IAAI,CAACC,KAAL,CAAWtB,QAAQ,CAAC,CAAD,CAAR,CAAYuB,IAAZ,CAAiBE,GAA5B,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,uBAAKd,SAAS,CAACZ,KAAK,CAAC2B,IAAP,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE,QAAC,WAAD;AAAa,YAAA,IAAI,EAAE1B,QAAQ,CAAC,CAAD,CAAR,CAAY2B,OAAZ,CAAoB,CAApB,EAAuBC,IAA1C;AAAgD,YAAA,IAAI,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;AACF;;GAlCuB9B,Q;;KAAAA,Q","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport WeatherIcon from \"./elements/WeatherIcon\";\n//import WeatherIcon from \"./elements/WeatherIcon\";\n\nexport default function Forecast(props) {\n  const [forecast, setForecast] = useState({});\n  const [ready, setReady] = useState(false);\n  function updateForecast(response) {\n    setForecast(response.data.daily);\n    console.log(forecast);\n    setReady(true);\n  }\n  let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Frid\", \"Sat\"];\n  function formatDay(index) {\n    return days[props.day + 1];\n  }\n\n  if (!ready) {\n    const apiKey = \"6ca05cf5f1705e072a89eb633f8633e9\";\n    let url = `https://api.openweathermap.org/data/2.5/onecall?lat=${props.coord.lat}&lon=${props.coord.lon}&appid=${apiKey}&units=metric`;\n\n    axios.get(url).then(updateForecast);\n\n    return null;\n  } else {\n    return (\n      <span className=\"BottomRight\">\n        <div className=\"card cardDay\">\n          <div className=\"card-body\">\n            <h3> {Math.round(forecast[0].temp.max)} °C</h3>\n            <h3 className=\"min\">{Math.round(forecast[0].temp.min)}°C</h3>\n            <h4>{formatDay(props.date)} </h4>\n            <WeatherIcon code={forecast[0].weather[0].icon} type=\"small\" />\n          </div>\n        </div>\n      </span>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}